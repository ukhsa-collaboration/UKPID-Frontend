@use "abstracts/functions" as fns;
@use "abstracts/mixins";
@use "abstracts/variables/breakpoints";
@use "custom-properties";

@import "normalize.css";

html {
  box-sizing: border-box;
  height: 100%;
  width: 100%;
  text-size-adjust: none;
}

body {
  height: 100%;
  width: 100%;
}

#app {
  --app-gap: #{fns.gap(0.5)};

  font-family: var(--body-font);
  font-size: var(--type-ramp-base-font-size);
  line-height: var(--type-ramp-base-line-height);
  background-color: var(--neutral-layer-2);
  color: var(--neutral-foreground-rest);
  height: 100%;
  width: 100%;
  word-break: break-word;
  hyphens: auto;

  @media screen and (min-width: breakpoints.$xs) {
    word-break: normal;
    hyphens: unset;
  }

  @media screen and (min-width: breakpoints.$md) {
    --app-gap: #{fns.gap(1)};
  }

  @media screen and (min-width: breakpoints.$xl) {
    --app-gap: #{fns.gap(2)};
  }
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

@for $i from 1 through 6 {
  h#{$i},
  .h#{$i} {
    /* stylelint-disable custom-property-pattern */
    font-size: var(--type-ramp-plus-#{7 - $i}-font-size);
    line-height: var(--type-ramp-plus-#{7 - $i}-line-height);
    margin-top: var(--type-ramp-plus-#{7 - $i}-top-margin);
    margin-bottom: var(--type-ramp-plus-#{7 - $i}-bottom-margin);
    /* stylelint-enable custom-property-pattern */
  }
}

p,
.p {
  margin-top: var(--type-ramp-base-top-margin);
  margin-bottom: var(--type-ramp-base-bottom-margin);
  font-weight: normal;
  font-size: var(--type-ramp-base-font-size);
  line-height: var(--type-ramp-base-line-height);
}

a {
  color: var(--link-color);
  text-decoration: var(--link-text-decoration);

  &:hover,
  &:focus-visible {
    color: var(--link-color-hover);
    text-decoration: var(--link-text-decoration-hover);
  }

  &:active {
    color: var(--link-color-active);
    text-decoration: var(--link-text-decoration-active);
  }
}
